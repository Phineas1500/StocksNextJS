generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  balance       Decimal       @default(10000.00) @db.Decimal(10, 2)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  portfolio     Portfolio?
  sessions      Session[]
  transactions  Transaction[]
}

model Company {
  id          String       @id @default(cuid())
  symbol      String       @unique
  name        String
  description String       @db.Text
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  stocks      Stock[]
  stockPrices StockPrice[]
}

model StockPrice {
  id        String   @id @default(cuid())
  price     Decimal  @db.Decimal(10, 2)
  timestamp DateTime @default(now())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])

  @@index([companyId, timestamp])
}

model Portfolio {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  stocks    Stock[]
}

model Stock {
  id          String    @id @default(cuid())
  quantity    Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  portfolioId String
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])

  @@unique([portfolioId, companyId])
  @@index([companyId])
}

model Transaction {
  id        String          @id @default(cuid())
  type      TransactionType
  quantity  Int
  price     Decimal         @db.Decimal(10, 2)
  total     Decimal         @db.Decimal(10, 2)
  createdAt DateTime        @default(now())
  userId    String
  companyId String
  user      User            @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([companyId])
}

enum TransactionType {
  BUY
  SELL
}
