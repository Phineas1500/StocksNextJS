// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  balance       Decimal   @default(10000.00) @db.Decimal
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // NextAuth.js relations
  accounts      Account[]
  sessions      Session[]
  
  // Your existing relations
  portfolio     Portfolio?
  transactions  Transaction[]
}

model Company {
  id          String   @id @default(cuid())
  symbol      String   @unique // Stock symbol (e.g., AAPL)
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  stockPrices StockPrice[]
  stocks      Stock[]
}

model StockPrice {
  id        String   @id @default(cuid())
  price     Decimal  @db.Decimal
  timestamp DateTime @default(now())

  // Relations
  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  @@index([companyId, timestamp])
}

model Portfolio {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
  stocks Stock[]
}

model Stock {
  id        String   @id @default(cuid())
  quantity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  portfolioId String
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String

  @@unique([portfolioId, companyId])
  @@index([companyId])
}

model Transaction {
  id        String           @id @default(cuid())
  type      TransactionType
  quantity  Int
  price     Decimal         @db.Decimal
  total     Decimal         @db.Decimal
  createdAt DateTime        @default(now())

  // Relations
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  companyId String

  @@index([userId, createdAt])
  @@index([companyId])
}

enum TransactionType {
  BUY
  SELL
}